

var roi = ee.FeatureCollection("projects/ee-shubhampawar/assets/mallapur_bound").geometry().buffer(5000)



Map.addLayer(roi)
Map.centerObject(roi,8)



var start_date = ee.Date('2022-11-01');
var end_date = ee.Date('2023-05-31');




function terrainCorrection(image) {
  var imgGeom = image.geometry();
  var srtm = ee.Image('USGS/SRTMGL1_003').clip(imgGeom); // 30m srtm
  var sigma0Pow = ee.Image.constant(10).pow(image.divide(10.0));


  // Article ( numbers relate to chapters)
  // 2.1.1 Radar geometry
  var theta_i = image.select('angle');
  var phi_i = ee.Terrain.aspect(theta_i)
    .reduceRegion(ee.Reducer.mean(), theta_i.get('system:footprint'), 1000)
    .get('aspect');


  // 2.1.2 Terrain geometry
  var alpha_s = ee.Terrain.slope(srtm).select('slope');
  var phi_s = ee.Terrain.aspect(srtm).select('aspect');


  // 2.1.3 Model geometry
  // reduce to 3 angle
  var phi_r = ee.Image.constant(phi_i).subtract(phi_s);


  // convert all to radians
  var phi_rRad = phi_r.multiply(Math.PI / 180);
  var alpha_sRad = alpha_s.multiply(Math.PI / 180);
  var theta_iRad = theta_i.multiply(Math.PI / 180);
  var ninetyRad = ee.Image.constant(90).multiply(Math.PI / 180);


  // slope steepness in range (eq. 2)
  var alpha_r = (alpha_sRad.tan().multiply(phi_rRad.cos())).atan();


  // slope steepness in azimuth (eq 3)
  var alpha_az = (alpha_sRad.tan().multiply(phi_rRad.sin())).atan();


  // local incidence angle (eq. 4)
  var theta_lia = (alpha_az.cos().multiply((theta_iRad.subtract(alpha_r)).cos())).acos();
  var theta_liaDeg = theta_lia.multiply(180 / Math.PI);
  // 2.2
  // Gamma_nought_flat
  var gamma0 = sigma0Pow.divide(theta_iRad.cos());
  var gamma0dB = ee.Image.constant(10).multiply(gamma0.log10());
  var ratio_1 = gamma0dB.select('VV').subtract(gamma0dB.select('VH'));


  // Volumetric Model
  var nominator = (ninetyRad.subtract(theta_iRad).add(alpha_r)).tan();
  var denominator = (ninetyRad.subtract(theta_iRad)).tan();
  var volModel = (nominator.divide(denominator)).abs();


  // apply model
  var gamma0_Volume = gamma0.divide(volModel);
  var gamma0_VolumeDB = ee.Image.constant(10).multiply(gamma0_Volume.log10());


  // we add a layover/shadow maskto the original implmentation
  // layover, where slope > radar viewing angle
  var alpha_rDeg = alpha_r.multiply(180 / Math.PI);
  var layover = alpha_rDeg.lt(theta_i);


  // shadow where LIA > 90
  var shadow = theta_liaDeg.lt(85);


  // calculate the ratio for RGB vis
  var ratio = gamma0_VolumeDB.select('VV').subtract(gamma0_VolumeDB.select('VH'));


  var output = gamma0_VolumeDB.addBands(ratio).addBands(alpha_r).addBands(phi_s).addBands(theta_iRad)
    .addBands(layover).addBands(shadow).addBands(gamma0dB).addBands(ratio_1);


  return image.addBands(
    output.select(['VV', 'VH'], ['VV', 'VH']),
    null,
    true
  );
}




//===============================Layerstack Function=======================================================


var stackCollection = function(collection) {
  // Create an initial image.
    var first = ee.Image(collection.first()).select([]);


  // Write a function that appends a band to an image.
    var appendBands = function(image, previous) {
      return ee.Image(previous).addBands(image);
    };
    return ee.Image(collection.iterate(appendBands, first));
};


//================================Band_count Function======================================================================


var band_count = function(image) {
  return ee.Algorithms.If(ee.Number(image.bandNames().length()).gt(2),
                          image, null);
                         
};


//=================================BandCount_two_Function======================================


var twobandcount = function(image) {
  return ee.Algorithms.If(ee.Number(image.bandNames().length()).gte(2),
                          image, null);
                         
};
//================================= newcoll bypixel ==========================================================


var newcoll_VV_bypixel = function(image) {
 
  var count = image.select('VV').reduceRegion(ee.Reducer.sum(), roi1, 10).values().get(0);
 
  return image.set({pixel_count: count})


};




var newcoll_VH_bypixel = function(image) {
 
  var count = image.select('VH').reduceRegion(ee.Reducer.sum(), roi1, 10).values().get(0);
 
  return image.set({pixel_count: count})


};


//==============================================================================
var pass_direction = "DESCENDING";
//var pass_direction = "ASCENDING";



var collection= ee.ImageCollection('COPERNICUS/S1_GRD')
      .filter(ee.Filter.eq('instrumentMode','IW'))
    //.filter(ee.Filter.listContains('transmitterReceiverPolarisation', polarization))
      .filter(ee.Filter.eq('orbitProperties_pass',pass_direction))
      .filter(ee.Filter.eq('resolution_meters',10))
    //.filter(ee.Filter.eq('relativeOrbitNumber_start',relative_orbit ))
      .filterMetadata('transmitterReceiverPolarisation', 'equals', ['VV', 'VH'])
      .filterBounds(roi)
      .filterDate(start_date, end_date);
     // .filterDate(st_date, end_date);
    //.select(polarization);

print('Image  collection' , collection);
 
 // var collection_refined = ee.List([]);
var col_length = collection.size().getInfo();
print('collection size ' , col_length);


var terrain_cor_col = collection.map(terrainCorrection);
//print('terrain_cor_col', terrain_cor_col);
var terrain_cor_col_size = terrain_cor_col.size().getInfo();
//print('terrain_cor_col_size', terrain_cor_col_size);



var range = terrain_cor_col.reduceColumns(ee.Reducer.minMax(), ["system:time_start"])

var startDate = ee.Date(ee.Date(range.get('min')).format('yyyy-MM-dd').getInfo());
//print('startDate', startDate);
var endDate = ee.Date(ee.Date(range.get('max')).format('yyyy-MM-dd').getInfo());
//print('endDate', endDate);

// Difference in days between start and finish
var diff = endDate.difference(startDate, 'day');

print('diff', diff);
//.subtract(1)
// Make a list of all dates
var range = ee.List.sequence(0, diff, 12).map(function(day){return startDate.advance(day,'day')});
print('range',range);

//===============================Day-wise mosaicFunction=======================================================


var day_mosaics = function(date, newlist) {
  // Cast
  date = ee.Date(date);
 
  var d_milli = ee.Date(date.millis());
  newlist = ee.List(newlist);

  // Filter collection between date and the next day
  var filtered = terrain_cor_col.filterDate(date, date.advance(1,'day')).select('VV', 'VH').set('system:time_start',d_milli.format('yyyy-MM-dd'));
  //---if len(filtered) > 1:
    // then do mosaic
    //else add image to newlist
  var filtered_col_size = filtered.size();
 
  var check_coll = ee.Image(collection.toList(filtered_col_size).get(0));
    //print('check_coll',check_coll);
  var check_coll_bandcount = check_coll.bandNames().length();
 
  if (ee.Number(filtered_col_size).gt(1)){
 
  // Make the mosaic
    var image = ee.Image(filtered.mosaic()).set('system:time_start',d_milli.format('yyyy-MM-dd'));
  //.rename(ee.String('VV_').cat(d_milli.format('yyyy-MM-dd')));
  // Add the mosaic to a list only if the collection has images
    return ee.List(newlist.add(image));
  } else if (ee.Number(check_coll_bandcount).gt(0)) {
    return ee.List(newlist.add(ee.Image(filtered)));
  }
};


var refined_coll_mosaic = ee.ImageCollection(ee.List(range.iterate(day_mosaics, ee.List([]))));
print('new_coll_latest',refined_coll_mosaic);
 
 
var new_coll_mosaic =  ee.ImageCollection(refined_coll_mosaic.map(twobandcount, true));
print('refined_coll_mosaic', new_coll_mosaic);

// var VV_stack = stackCollection(new_coll_mosaic.select('VV'));
// print('VV_stack', VV_stack);

var VH_stack = stackCollection(new_coll_mosaic.select('VH'));
print('VH_stack', VH_stack);

Map.addLayer(VH_stack.clip(roi))


var fd_name = 'Mallapur_crop_class'

Export.table.toDrive({
  collection: new_coll_mosaic,
  fileNamePrefix:  'Mallapur_VH_stack_S1B_2022-06-01_2023-05-31_10m_16bit',
  description:'Mulsi_VH_stack_S1B_2022-06-01_2023-05-31_10m_16bit',
  folder: fd_name,
  fileFormat: 'csv'
});



Export.image.toDrive({
  image: VH_stack.multiply(-300).clip(roi).toInt16(),
  fileNamePrefix: 'Mallapur_VH_stack_S1B_2022-06-01_2023-05-31_10m_16bit' ,
  description:  'Mulsi_VH_stack_S1B_2022-06-01_2023-05-31_10m_16bit',
  region: roi,
  folder: fd_name,
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF'
});

