/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var table = ee.FeatureCollection("users/shubhampawar/godavari_ts_remaining_corrected");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

//var bound_FC = ee.FeatureCollection("users/shubhampawar/godavari_ts_remaining_corrected");
//var bound_FC = ee.FeatureCollection("projects/ee-shubhampawar/assets/esciwam_projects_5")

var bound_FC = ee.FeatureCollection("projects/ee-shubhampawar/assets/6_villages_TN_demo")

for (var j = 1 ; j < 7 ; j++){
  var roi = bound_FC.filter(ee.Filter.equals('id', j)).geometry()

//var roi = ee.FeatureCollection(bound_FC).geometry()
//var roi_1 = ee.FeatureCollection(bound_FC).geometry().buffer(5000)

//Map.addLayer(roi_1)
//Map.addLayer(roi)
//Map.centerObject(roi,10)

var start_Date = ee.Date('2016-06-04');
var end_Date = ee.Date('2018-11-30');

var batch = require('users/fitoprincipe/geetools:batch')


// ------ Functions -----------

// creating empty image
var empty_img = ee.Image();
// matching the datatype of empty image to exported stack collection
var empty_img_int16 = empty_img.toUint16();
//print('empty_img_int16', empty_img_int16 );

// checking for number of bands
var count = empty_img_int16.bandNames().size();
//print('count', count );

// Function for checking image with band less than 1, and replacing it with empty band
var onebandcount = function(image) {
  return ee.Algorithms.If(ee.Number(image.bandNames().length()).lt(1),
                          image.addBands(empty_img_int16), image);
                          
};


// function for cloud masking
function maskCloudAndShadows(image) {
  var cloudProb = image.select('MSK_CLDPRB');
  var snowProb = image.select('MSK_SNWPRB');
  var cloud = cloudProb.lt(5);
  var snow = snowProb.lt(5);
  var scl = image.select('SCL'); 
  var shadow = scl.eq(3); // 3 = cloud shadow
  var cirrus = scl.eq(10); // 10 = cirrus
  // Cloud probability less than 5% or cloud shadow classification
  var mask = (cloud.and(snow)).and(cirrus.neq(1)).and(shadow.neq(1));
  return image.updateMask(mask);
}



/*
// compute MSAVI2 using expression
var msavi2 = composite.expression(
  '(2 * NIR + 1 - sqrt(pow((2 * NIR + 1), 2) - 8 * (NIR - RED)) ) / 2', 
  {
    'NIR': composite.select('B8'), 
    'RED': composite.select('B4')
  }
);
*/
// // Calculate NDVI.
// var calculateNDVI = function(scene) {
//   // get a string representation of the date.
//   var dateString = ee.Date(scene.get('system:time_start')).format('yyyy-MM-dd');
//   var ndvi = scene.normalizedDifference(['B8', 'B4']);
//   var ndvi2 = ndvi.multiply(10000).toInt16();
//   return ndvi2.rename(dateString);
// };

// NDVI - 'B8', 'B4'
// NDMI - 'B8', 'B11'
//

var addNDVI = function(image) {
  var ndvi = image.normalizedDifference(['B8', 'B11']).rename('NDVI');
  return image.addBands(ndvi.multiply(10000).toInt16());
};

var stackCollection = function(collection) {
  // Create an initial image.
  var first = ee.Image(collection.first()).select([]);

  // Write a function that appends a band to an image.
  var appendBands = function(image, previous) {
    return ee.Image(previous).addBands(image);
  };
  return ee.Image(collection.iterate(appendBands, first));
};

//----------------- end functon ---------------

// Define an example collection.
var NDVI_collection = //ee.ImageCollection('COPERNICUS/S2_SR')
                  ee.ImageCollection("COPERNICUS/S2")
                  //.filter(ee.Filter.eq('MGRS_TILE', '44QPF')) //44QQG, 44QQF, 44QPF, 44QPG
                  .filterDate(start_Date, end_Date)
                  .filterBounds(roi)
                  //.filter(ee.Filter.lt('CLOUD_COVERAGE_ASSESSMENT', 10))
                  //.map(maskCloudAndShadows)
                  .map(addNDVI);
                   
print(NDVI_collection);

//Map.addLayer(collection)


var range = NDVI_collection.reduceColumns(ee.Reducer.minMax(), ["system:time_start"])

var startDate = ee.Date(ee.Date(range.get('min')).format('yyyy-MM-dd').getInfo());
print('startDate', startDate);
var endDate = ee.Date(ee.Date(range.get('max')).format('yyyy-MM-dd').getInfo());
print('endDate', endDate);


// Difference in days between start and finish
var diff = endDate.difference(startDate, 'day');
//print(diff)

// Make a list of all dates
var range = ee.List.sequence(0, diff.subtract(1), 10).map(function(day){return startDate.advance(day,'day')});
//print(range);

// Funtion for iteraton over the range of dates
var ten_day_max_mosaics = function(date, newlist) {
  // Cast
  date = ee.Date(date);
  
  //var d_milli = ee.Date(date.millis());
  var d_milli = date.millis();
  newlist = ee.List(newlist);

  // Filter collection between date and the next day
  var filtered = NDVI_collection.filterDate(date, date.advance(10,'day')).select('B11').set('system:time_start',d_milli);//.format('yyyy-MM-dd')

  // Make the mosaic
  var image = ee.Image(filtered.reduce(ee.Reducer.max()).clip(roi)).set('system:time_start',d_milli)//.format('yyyy-MM-dd')//.rename(ee.String('NDVI_').cat(d_milli.format('yyyy-MM-dd')));

  // Add the mosaic to a list only if the collection has images
  //return ee.List(ee.Algorithms.If(filtered.size(), newlist.add(image), newlist));
  return ee.List(newlist.add(image));
  
};

// Iterate over the range to make a new list, and then cast the list to an imagecollection
var newcol = ee.ImageCollection(ee.List(range.iterate(ten_day_max_mosaics, ee.List([]))));
//print(newcol);



var final_col = newcol.map(onebandcount);

//var date_list1 = final_col.reduceColumns(ee.Reducer.toList(), ["system:time_start"]).get('list').getInfo();
 
print(final_col);



//var num_date = final_col.size().getInfo();
//print(num_date);

var NDVI_stack = stackCollection(final_col);

//print(final_col)

var fd_name = 'TN_6vill_SWIR_stack'//_'+ j

var fileName = 'TN_6vill_NDMI_SWIR_stack_L1_16-18_'+ j


Export.table.toDrive({
  collection: final_col,
  folder: fd_name ,
  description: fileName,
  fileNamePrefix:  fileName,
  fileFormat: 'csv'
});

// Export Sentinel VH VV image as TIFF file 
Export.image.toDrive({
  image: NDVI_stack, 
  description: fileName,
  fileNamePrefix:  fileName,
  region: roi.bounds(), 
  folder: fd_name ,
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF'
});



// // export collection to google drive
// batch.Download.ImageCollection.toDrive(final_col, fd_name, {
//   name: 'NDMI_MH_bayer_{system_date}',
//   scale: 10,
//   crs: 'EPSG:4326',
//   type : 'int16',
//   region: roi.bounds().getInfo() // or geometry.getInfo()
// })

}