/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[82.39989308766626, 19.74622274608928],
          [82.39989308766626, 19.37094859906339],
          [82.96019582204126, 19.37094859906339],
          [82.96019582204126, 19.74622274608928]]], null, false),
    geometry2 = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[82.89427785329126, 19.743637646843805],
          [82.89427785329126, 19.31652640841015],
          [83.54796437672876, 19.31652640841015],
          [83.54796437672876, 19.743637646843805]]], null, false),
    geometry3 = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[82.44383840016626, 20.089666075431904],
          [82.44383840016626, 19.715198793222083],
          [82.91075734547876, 19.715198793222083],
          [82.91075734547876, 20.089666075431904]]], null, false),
    geometry4 = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[82.59764699391626, 19.459022178249082],
          [82.59764699391626, 19.083083687204066],
          [83.06456593922876, 19.083083687204066],
          [83.06456593922876, 19.459022178249082]]], null, false),
    geometry5 = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[82.84758595876, 20.089666075431865],
          [82.84758595876, 19.715198793222044],
          [83.3145049040725, 19.715198793222044],
          [83.3145049040725, 20.089666075431865]]], null, false),
    geometry6 = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[83.4243681853225, 20.548134564244695],
          [83.4243681853225, 19.98387217529661],
          [83.8638213103225, 19.98387217529661],
          [83.8638213103225, 20.548134564244695]]], null, false),
    geometry7 = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[83.28773017067726, 20.08424082734533],
          [83.28773017067726, 19.696831830325067],
          [83.63379950661476, 19.696831830325067],
          [83.63379950661476, 20.08424082734533]]], null, false),
    geometry8 = 
    /* color: #0b4a8b */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[82.58185858864601, 20.29562148026523],
          [82.58185858864601, 20.03522154840841],
          [83.15589423317726, 20.03522154840841],
          [83.15589423317726, 20.29562148026523]]], null, false),
    geometry9 = 
    /* color: #ffc82d */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[83.12018866677101, 20.54529727255264],
          [83.12018866677101, 20.037801892127558],
          [83.46076483864601, 20.037801892127558],
          [83.46076483864601, 20.54529727255264]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var od_selected = ee.FeatureCollection("users/pawarshubham60/OD_selected_district");
var koraput = ee.FeatureCollection(od_selected).filter(ee.Filter.neq('DIST', "Koraput")).geometry().buffer(10000)

Map.addLayer(koraput)
Map.centerObject(koraput,10)


// creating empty image
var empty_img = ee.Image();
// matching the datatype of empty image to exported stack collection
var empty_img_int16 = empty_img.toInt16();
//print('empty_img_int16', empty_img_int16 );


// checking for number of bands
var count = empty_img_int16.bandNames().size();
//print('count', count );

// Function for checking image with band less than 1, and replacing it with empty band
var onebandcount = function(image) {
  return ee.Algorithms.If(ee.Number(image.bandNames().length()).lt(1),
                          image.addBands(empty_img_int16), image);
                          
};

var path = 1;
if (path == 1){
  var tile = '45QUC';
  //var startDate = ee.Date('2019-10-30');
  //var endDate = ee.Date('2020-06-30');
  var startDate = ee.Date('2018-12-10');
  var endDate = ee.Date('2022-03-11');
}
else{
  var tile = '45QVC';
  var startDate = ee.Date('2019-11-01');
  var endDate = ee.Date('2020-06-30');
}

//var tile = '45QUC'; //if path = 2
// Define a sample Region-of-Interest 
//var roi = geometry4;
// var roi = ee.FeatureCollection(Odisha_coast).filter(ee.Filter.eq('path', path)).filter(ee.Filter.eq('Name', tile));
// var roi2 = ee.FeatureCollection(Jagtial);


// function for cloud masking
function maskCloudAndShadows(image) {
  var cloudProb = image.select('MSK_CLDPRB');
  var snowProb = image.select('MSK_SNWPRB');
  var cloud = cloudProb.lt(5);
  var snow = snowProb.lt(5);
  var scl = image.select('SCL'); 
  var shadow = scl.eq(3); // 3 = cloud shadow
  var cirrus = scl.eq(10); // 10 = cirrus
  // Cloud probability less than 5% or cloud shadow classification
  var mask = (cloud.and(snow)).and(cirrus.neq(1)).and(shadow.neq(1));
  return image.updateMask(mask);
}



/*
// compute MSAVI2 using expression
var msavi2 = composite.expression(
  '(2 * NIR + 1 - sqrt(pow((2 * NIR + 1), 2) - 8 * (NIR - RED)) ) / 2', 
  {
    'NIR': composite.select('B8'), 
    'RED': composite.select('B4')
  }
);
*/
// Calculate NDVI.
var calculateNDVI = function(scene) {
  // get a string representation of the date.
  var dateString = ee.Date(scene.get('system:time_start')).format('yyyy-MM-dd');
  var ndvi = scene.normalizedDifference(['B8', 'B4']);
  var ndvi2 = ndvi.multiply(10000).toInt16();
  return ndvi2.rename(dateString);
};

var addNDVI = function(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');
  return image.addBands(ndvi.multiply(10000).toInt16());
};


var startDate = ee.Date('2019-06-05');
var endDate = ee.Date('2020-06-02');

// Define an example collection.
var collection = ee.ImageCollection('COPERNICUS/S2_SR')
                  //.filter(ee.Filter.eq('MGRS_TILE', '44QPF')) //44QQG, 44QQF, 44QPF, 44QPG
                  .filterDate(startDate, endDate)
                  .filterBounds(koraput)
                  //.filter(ee.Filter.lt('CLOUD_COVERAGE_ASSESSMENT', 10))
                  //.map(maskCloudAndShadows)
                  .map(addNDVI);
                   
print(collection);

//Map.addLayer(collection)

var NDVI_collection = collection.map(addNDVI);

// Difference in days between start and finish
var diff = endDate.difference(startDate, 'day');

print(diff)

// Make a list of all dates
var range = ee.List.sequence(0, diff.subtract(1), 5).map(function(day){return startDate.advance(day,'day')});
print(range);

// Funtion for iteraton over the range of dates
var day_mosaics = function(date, newlist) {
  // Cast
  date = ee.Date(date);
  
  var d_milli = ee.Date(date.millis());
  newlist = ee.List(newlist);

  // Filter collection between date and the next day
  var filtered = NDVI_collection.filterDate(date, date.advance(1,'day')).select('NDVI').set('system:time_start',d_milli.format('yyyy-MM-dd'));

  // Make the mosaic
  var image = ee.Image(filtered.mosaic().clip(koraput)).set('system:time_start',d_milli.format('yyyy-MM-dd'))//.rename(ee.String('NDVI_').cat(d_milli.format('yyyy-MM-dd')));

  // Add the mosaic to a list only if the collection has images
  //return ee.List(ee.Algorithms.If(filtered.size(), newlist.add(image), newlist));
  return ee.List(newlist.add(image));

};

// Iterate over the range to make a new list, and then cast the list to an imagecollection
var newcol = ee.ImageCollection(ee.List(range.iterate(day_mosaics, ee.List([]))));
print(newcol);

var stackCollection = function(collection) {
  // Create an initial image.
  var first = ee.Image(collection.first()).select([]);

  // Write a function that appends a band to an image.
  var appendBands = function(image, previous) {
    return ee.Image(previous).addBands(image);
  };
  return ee.Image(collection.iterate(appendBands, first));
};

var final_col = newcol.map(onebandcount);

var date_list1 = final_col.reduceColumns(ee.Reducer.toList(), ["system:time_start"]).get('list').getInfo();
 
print(date_list1);



var num_date = final_col.size().getInfo();
print(num_date);
var NDVI_stack = stackCollection(final_col);
//var label = "band " + num_date-3;
Map.addLayer(ee.FeatureCollection(koraput));
Map.addLayer(NDVI_stack);


// Difference in days between start and finish
var diff = endDate.difference(startDate, 'day');

print(diff)

// Make a list of all dates
var range_2 = ee.List.sequence(0, diff.subtract(1), 10).map(function(day){return startDate.advance(day,'day')});
print(range_2);

// Funtion for iteraton over the range of dates
var ten_day_max = function(date, newlist) {
  // Cast
  date = ee.Date(date);
  
  var d_milli = ee.Date(date.millis());
  newlist = ee.List(newlist);

  // Filter collection between date and the next day
  var filtered = final_col.filterDate(date, date.advance(10,'day')) //.select('NDVI').set('system:time_start',d_milli.format('yyyy-MM-dd'));

  // Make the mosaic
  var image = ee.Image(filtered.reduce(ee.Reducer.max()).clip(koraput)).set('system:time_start',d_milli.format('yyyy-MM-dd')).rename(ee.String('NDVI_10_').cat(d_milli.format('yyyy-MM-dd')));
  
  image = image.toInt16()
  // Add the mosaic to a list only if the collection has images
  //return ee.List(ee.Algorithms.If(filtered.size(), newlist.add(image), newlist));
  return ee.List(newlist.add(image));

};

// Iterate over the range to make a new list, and then cast the list to an imagecollection
var ndvi_10days_max = ee.ImageCollection(ee.List(range_2.iterate(ten_day_max, ee.List([]))));
print(ndvi_10days_max);


var NDVI_stack_2 = stackCollection(ndvi_10days_max);
//var label = "band " + num_date-3;
//Map.addLayer(ee.FeatureCollection(koraput));
Map.addLayer(NDVI_stack_2,{},"NDVI_stack_2");


//Map.addLayer(ndvi_10days_max,{}, "ndvi_10days_max")
// var num_bands = ee.Number(num_date)

// // Make a list of all dates
// var range_3 = ee.List.sequence(0,num_bands.subtract(1), 2) //.map(function(day){return startDate.advance(day,'day')});
// print(range_3);

// // Funtion for iteraton over the range of dates
// var ten_day_max_2 = function(band_1, newlist) {
//   // Cast
//   band_1 = ee.Number(band_1)
//   var band_2 = band_1.add(1)
  
//   // var d_milli = ee.Date(date.millis());
//   newlist = ee.List(newlist);

//   // Filter collection between date and the next day
//   var filtered = ee.ImageCollection([ee.Image(NDVI_stack.select(band_1)),ee.Image(NDVI_stack.select(band_2))])
  
//   //var filtered = final_col.filterDate(date, date.advance(10,'day'))  //.select('NDVI').set('system:time_start',d_milli.format('yyyy-MM-dd'));

//   // Make the mosaic
//   var image = ee.Image(filtered.reduce(ee.Reducer.max()).clip(koraput)) //.set('system:time_start',d_milli.format('yyyy-MM-dd')).rename(ee.String('NDVI_').cat(d_milli.format('yyyy-MM-dd')));

//   // Add the mosaic to a list only if the collection has images
//   //return ee.List(ee.Algorithms.If(filtered.size(), newlist.add(image), newlist));
//   return ee.List(newlist.add(image));

// };

// // Iterate over the range to make a new list, and then cast the list to an imagecollection
// var ndvi_10days_max_2 = ee.ImageCollection(ee.List(range_3.iterate(ten_day_max_2, ee.List([]))));

// print(ndvi_10days_max_2);



// var NDVI_stack_2 = stackCollection(ndvi_10days_max_2);
// //var label = "band " + num_date-3;
// Map.addLayer(ee.FeatureCollection(koraput));
// Map.addLayer(NDVI_stack_2);




Export.image.toDrive({
  image: NDVI_stack_2.clip(geometry),
  folder : "vassar_labs/Kalahandi/1920",
  description: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part1',
  fileNamePrefix: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part1',
  region: geometry, 
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true},
  skipEmptyTiles: true
});


Export.image.toDrive({
  image: NDVI_stack_2.clip(geometry2),
  folder : "vassar_labs/Kalahandi/1920",
  description: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part2',
  fileNamePrefix: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part2',
  region: geometry2, 
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true},
  skipEmptyTiles: true
});

Export.image.toDrive({
  image: NDVI_stack_2.clip(geometry3),
  folder : "vassar_labs/Kalahandi/1920",
  description: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part3',
  fileNamePrefix: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part3',
  region: geometry3, 
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true},
  skipEmptyTiles: true
});

Export.image.toDrive({
  image: NDVI_stack_2.clip(geometry4),
  folder : "vassar_labs/Kalahandi/1920",
  description: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part4',
  fileNamePrefix: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part4',
  region: geometry4, 
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true},
  skipEmptyTiles: true
});

Export.image.toDrive({
  image: NDVI_stack_2.clip(geometry5),
  folder : "vassar_labs/Kalahandi/1920",
  description: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part5',
  fileNamePrefix: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part5',
  region: geometry5, 
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true},
  skipEmptyTiles: true
});

Export.image.toDrive({
  image: NDVI_stack_2.clip(geometry6),
  folder : "vassar_labs/Kalahandi/1920",
  description: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part6',
  fileNamePrefix: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part6',
  region: geometry6, 
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true},
  skipEmptyTiles: true
});

Export.image.toDrive({
  image: NDVI_stack_2.clip(geometry7),
  folder : "vassar_labs/Kalahandi/1920",
  description: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part7',
  fileNamePrefix: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part7',
  region: geometry7, 
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true},
  skipEmptyTiles: true
});


Export.image.toDrive({
  image: NDVI_stack_2.clip(geometry8),
  folder : "vassar_labs/Kalahandi/1920",
  description: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part8',
  fileNamePrefix: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part8',
  region: geometry8, 
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true},
  skipEmptyTiles: true
});

Export.image.toDrive({
  image: NDVI_stack_2.clip(geometry9),
  folder : "vassar_labs/Kalahandi/1920",
  description: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part9',
  fileNamePrefix: 'Kalahandi_10km_buffer_S2_SR_NDVI_44QP_1920_Part9',
  region: geometry9, 
  scale: 10,
  crs: 'EPSG:4326',
  maxPixels: 1.0E13,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true},
  skipEmptyTiles: true
});

// var featureCollection = ee.FeatureCollection(date_list1
//                         .map(function(element){
//                         return ee.Feature(null,{prop:element})}));

// //print('featureCollection_dates',featureCollection);

// Export.table.toDrive({
//     collection: featureCollection,
//     description: 'Jagtial_test_NDVI_csv',
//     fileNamePrefix: 'Jagtial_test_S2_SR-NDVI',
//     folder: 'Jagtial_test_NDVI_CSV',
//     fileFormat: 'CSV'
// });